// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

//  Next Auth Models
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  companies     Company[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// New models
enum Role {
  USER
  ADMIN
}

model Company {
  id                   String                @id @default(cuid())
  name                 String                @unique
  ethicsRating         Int? // 1-5 rating, null for 'Q'
  priceRating          Int? // 1-5 rating, null for 'Q'
  qualityServiceRating Int? // 1-5 rating, null for 'Q'
  products             ProductAvailability[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  createdBy            User                  @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById          String
}

model Product {

}

model ProductAvailability {
  id        String             @id @default(cuid())
  company   Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  product   Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  status    AvailabilityStatus
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@unique([companyId, productId])
  @@index([companyId])
  @@index([productId])
}

enum AvailabilityStatus {
  AVAILABLE // Y
  NOT_AVAILABLE // N
  UNKNOWN // Q
}
